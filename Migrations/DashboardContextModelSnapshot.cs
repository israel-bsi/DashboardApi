// <auto-generated />
using System;
using DashboardApi.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DashboardApi.Migrations
{
    [DbContext(typeof(DashboardContext))]
    partial class DashboardContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("DashboardApi.Data.Models.DevLevel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("VARCHAR");

                    b.HasKey("Id");

                    b.ToTable("DevLevel", (string)null);
                });

            modelBuilder.Entity("DashboardApi.Data.Models.Developer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("DevLevelId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("VARCHAR");

                    b.HasKey("Id");

                    b.HasIndex("DevLevelId");

                    b.ToTable("Developer", (string)null);
                });

            modelBuilder.Entity("DashboardApi.Data.Models.PaymentStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("VARCHAR");

                    b.HasKey("Id");

                    b.ToTable("PaymentStatus", (string)null);
                });

            modelBuilder.Entity("DashboardApi.Data.Models.Project", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AmountHours")
                        .IsRequired()
                        .HasMaxLength(6)
                        .HasColumnType("VARCHAR");

                    b.Property<string>("Customer")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("LastUpdateAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("DATE")
                        .HasDefaultValue(new DateTime(2024, 5, 30, 21, 37, 54, 443, DateTimeKind.Utc).AddTicks(1940));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("VARCHAR");

                    b.Property<int>("Order")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INT")
                        .HasDefaultValue(0);

                    b.Property<int>("PaymentId")
                        .HasColumnType("int");

                    b.Property<DateTime>("RequestedAt")
                        .HasColumnType("DATE");

                    b.Property<int>("StatsId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<decimal>("Value")
                        .HasColumnType("DECIMAL(7,2)");

                    b.HasKey("Id");

                    b.HasIndex("PaymentId");

                    b.HasIndex("StatsId");

                    b.HasIndex("UserId");

                    b.ToTable("Project", (string)null);
                });

            modelBuilder.Entity("DashboardApi.Data.Models.ProjectStatus", b =>
                {
                    b.Property<int>("ProjectId")
                        .HasColumnType("int");

                    b.Property<int>("StatsId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("EndedAt")
                        .HasColumnType("DATETIME");

                    b.Property<DateTime>("StartedAt")
                        .HasColumnType("DATETIME");

                    b.HasKey("ProjectId", "StatsId");

                    b.HasIndex("StatsId");

                    b.ToTable("ProjectStatus", (string)null);
                });

            modelBuilder.Entity("DashboardApi.Data.Models.Settings", b =>
                {
                    b.Property<decimal>("ValuePerHour")
                        .HasColumnType("DECIMAL(7,2)");

                    b.ToTable("Settings", (string)null);
                });

            modelBuilder.Entity("DashboardApi.Data.Models.Status", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("VARCHAR");

                    b.HasKey("Id");

                    b.ToTable("Status", (string)null);
                });

            modelBuilder.Entity("DashboardApi.Data.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<sbyte>("Adm")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TINYINT")
                        .HasDefaultValue((sbyte)0);

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("VARCHAR");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("VARCHAR");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("VARCHAR");

                    b.HasKey("Id");

                    b.ToTable("User", (string)null);
                });

            modelBuilder.Entity("ProjectDev", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<int?>("DevId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DevId");

                    b.ToTable("ProjectDev");
                });

            modelBuilder.Entity("DashboardApi.Data.Models.Developer", b =>
                {
                    b.HasOne("DashboardApi.Data.Models.DevLevel", "Devlevel")
                        .WithMany("Developers")
                        .HasForeignKey("DevLevelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Developer_DevLevel");

                    b.Navigation("Devlevel");
                });

            modelBuilder.Entity("DashboardApi.Data.Models.Project", b =>
                {
                    b.HasOne("DashboardApi.Data.Models.PaymentStatus", "PaymentStatus")
                        .WithMany("Projects")
                        .HasForeignKey("PaymentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Project_PaymentStats");

                    b.HasOne("DashboardApi.Data.Models.Status", "Status")
                        .WithMany("Projects")
                        .HasForeignKey("StatsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Project_ProjectStats");

                    b.HasOne("DashboardApi.Data.Models.User", "User")
                        .WithMany("Projects")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Project_User");

                    b.Navigation("PaymentStatus");

                    b.Navigation("Status");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DashboardApi.Data.Models.ProjectStatus", b =>
                {
                    b.HasOne("DashboardApi.Data.Models.Project", "Project")
                        .WithMany("ProjectStatus")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_ProjectStatsHistory_ProjectId");

                    b.HasOne("DashboardApi.Data.Models.Status", "Status")
                        .WithMany("ProjectStatus")
                        .HasForeignKey("StatsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_ProjectStatsHistory_StatsId");

                    b.Navigation("Project");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("ProjectDev", b =>
                {
                    b.HasOne("DashboardApi.Data.Models.Developer", null)
                        .WithMany()
                        .HasForeignKey("DevId")
                        .HasConstraintName("FK_ProjectDev_DevId");

                    b.HasOne("DashboardApi.Data.Models.Project", null)
                        .WithMany()
                        .HasForeignKey("Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_ProjectDev_ProjectId");
                });

            modelBuilder.Entity("DashboardApi.Data.Models.DevLevel", b =>
                {
                    b.Navigation("Developers");
                });

            modelBuilder.Entity("DashboardApi.Data.Models.PaymentStatus", b =>
                {
                    b.Navigation("Projects");
                });

            modelBuilder.Entity("DashboardApi.Data.Models.Project", b =>
                {
                    b.Navigation("ProjectStatus");
                });

            modelBuilder.Entity("DashboardApi.Data.Models.Status", b =>
                {
                    b.Navigation("ProjectStatus");

                    b.Navigation("Projects");
                });

            modelBuilder.Entity("DashboardApi.Data.Models.User", b =>
                {
                    b.Navigation("Projects");
                });
#pragma warning restore 612, 618
        }
    }
}
